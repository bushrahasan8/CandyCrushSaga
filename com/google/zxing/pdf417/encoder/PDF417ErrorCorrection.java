package com.google.zxing.pdf417.encoder;

import com.ironsource.mediationsdk.logger.IronSourceError;
import com.unity3d.ads.gatewayclient.CommonGatewayClient;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;

/* loaded from: PDF417ErrorCorrection.class */
abstract class PDF417ErrorCorrection {
    private static final int[][] EC_COEFFICIENTS = {new int[]{27, 917}, new int[]{522, 568, 723, 809}, new int[]{237, 308, 436, 284, 646, 653, 428, 379}, new int[]{274, 562, 232, 755, CommonGatewayClient.CODE_599, IronSourceError.ERROR_REACHED_CAP_LIMIT_PER_PLACEMENT, 801, 132, 295, 116, 442, 428, 295, 42, 176, 65}, new int[]{361, 575, 922, IronSourceError.ERROR_AD_UNIT_CAPPED, 176, 586, 640, 321, 536, 742, 677, 742, 687, 284, 193, 517, 273, 494, 263, 147, 593, 800, 571, 320, 803, 133, 231, 390, 685, 330, 63, 410}, new int[]{539, 422, 6, 93, 862, 771, 453, 106, 610, 287, 107, IronSourceError.ERROR_CODE_KEY_NOT_SET, 733, 877, 381, IronSourceError.ERROR_BN_INSTANCE_INIT_EXCEPTION, 723, 476, 462, 172, 430, IronSourceError.ERROR_BN_INSTANCE_RELOAD_TIMEOUT, 858, 822, 543, 376, 511, 400, 672, 762, 283, 184, 440, 35, 519, 31, 460, 594, 225, 535, 517, 352, IronSourceError.ERROR_BN_LOAD_EXCEPTION, 158, 651, 201, 488, IronSourceError.ERROR_CODE_USING_CACHED_CONFIGURATION, 648, 733, 717, 83, 404, 97, 280, 771, 840, 629, 4, 381, 843, 623, 264, 543}, $d2j$hex$e86ed132$decode_I("090200003601000060030000230200005a03000044020000280100007b010000350000000b03000081030000bc010000900100009d030000ed0200009f010000360300005d000000d9000000d0000000a0030000f4000000470200006c020000f600000094000000bf01000077020000240100008c030000ea010000c00200000402000002010000c90100008b03000052020000d3020000a2020000240100001001000060000000ac020000b0010000ae0200005e0200005c03000039020000c1000000db00000081000000ba000000ec0000001f010000c00000000703000016010000ad000000280000007b010000c8020000cf0100008602000008030000ab000000eb01000029010000fb0200009c000000dc0200005f0000000e010000bf0100005a000000fb01000030000000e40000003503000028030000820300001003000097020000730200007a0100007e010000060100007c0100005a020000f202000050010000590000006602000057000000b00100009e020000680200009d00000076010000f2000000d6020000580200000d01000077010000820300004d030000c601000062010000820000002e0300004b0200002403000022000000d30000004a0100001b020000290100003b030000610300002500000005020000420300003b010000260200005600000021030000040000006c0000001b020000"), $d2j$hex$e86ed132$decode_I("0c0200007e0300004b000000fe02000072030000590300004a000000cc000000520000004a020000c4020000fa00000089030000120300008a000000d00200005a030000c2000000370100009103000013010000be0000007701000052030000b6010000dd020000c200000018010000c9000000180100003c030000f5020000c60200002e030000970300005900000044000000390200000b000000cc0000001c0300005d0200001c0200009103000021030000bc0200001f03000089000000b7010000a2010000500200009c020000610100005b03000072010000b602000045010000f0000000d8000000010100001c01000025020000d1000000740300003b010000460000004901000019030000ea010000120100006d030000a2000000ed0200002c030000ac020000cd0100004e010000780100005103000009020000330100002301000023030000c802000013000000660100008f0100008c03000067000000ff010000330000000800000005020000e100000021010000d60100007d020000db02000042000000ff000000950300000d010000cf0100003e030000da020000b10100005003000049020000880000001a0200008a0300005a0000000200000022010000e7020000c70000008f0200008703000049010000310000002203000044020000630100004c020000bc000000ce0100000a000000860000007402000040010000df01000082000000e302000047000000070100003e0100007601000059020000c00000005d0200008e000000a1020000af020000ea000000d202000080010000b1000000f00200005f02000080020000c7010000c1000000b1020000c30200002503000081020000300000003c000000dc0200006d0200007f0300002002000005010000540300008f02000035010000b9020000f3020000f40200003c000000e700000005030000b2010000a5010000d602000010020000f701000076000000310000001b0300002000000090000000f4010000ee000000440300008a01000018010000360200003f0100000900000087020000260200004900000092030000560100007e00000020000000a90200004b010000180300006c0200003c00000061020000b9010000b4000000170300007d030000f20200005d0200007f010000e4000000ed020000f8020000d500000036000000290100008600000036000000420300002b0100009a030000bf0000008e03000014020000610200003d030000bd00000014000000a70000001d00000068030000c101000053000000920100002900000090020000f901000043020000e1010000ad00000094010000fb000000b00200005f000000f10100002b020000820200001f020000330100009f0000009c0300002e0200008802000037000000f10100000a000000"), $d2j$hex$e86ed132$decode_I("600100004d00000075010000f80100002300000057020000ac010000cf000000990100003e02000076000000f20100001d0100007c0100005e010000ec010000c500000009010000980300009b000000920300002b010000e5000000830200002601000067030000320100005800000057000000c1000000600100000d0300004e0300004b0000004701000008020000b30100001f020000cb0000009a020000f90000005a0100000d0300006d020000800200000c0100001a030000160200001b0200000d03000098010000860100008402000066000000dc010000f3010000220100007802000021020000250000005a0300009403000028020000290000001e020000210100007a000000100100007f01000020030000e501000062000000f0020000d8010000f90200006b000000100300005c03000092020000e502000022010000cc000000a9020000970100005703000055000000630000003e000000e2010000b40000001400000029010000c301000051020000910300008e00000028030000ac0200001f01000018020000310200004c0000008d02000083030000d902000037020000e80200008601000001020000c00000000402000002010000f0000000060200001a0300008b0100000003000050030000330000006202000080010000a8000000be0000003a0300004801000054020000120300002f0100003a0200007d0100009f010000810200009c000000ed00000097000000ad01000013020000cf000000a4020000c602000059000000a8000000300100009201000028000000c40200003f020000a200000060030000e5000000410000005d0300004903000000020000a4000000dd010000dd0000005c0000006601000011030000200100006501000052030000440300003b030000e0020000c30200005e00000008000000ee010000720000000902000002000000f3010000530300001f02000098000000d9020000030300005f000000f8000000690100004202000043010000580300001d0300002101000033000000ac020000d201000015020000340300009d0200002d00000086030000c4010000a700000056010000f4000000ad00000023000000cf0100008b02000033000000bb0200004f020000c401000042020000250000007c0000002a0100004c010000280200002b000000ab010000770000009602000009030000db01000052030000fc0200006c010000420200008f0300001b010000c7020000d8010000a4010000f500000020010000520200008a010000ff010000470100004d02000009030000bb020000b00200002b000000980100004a0300007f010000d1020000090200003002000084020000ca0200002f0200003e000000910000006903000097020000c90200009f000000a0020000d9020000700200003b000000c1000000a10100009e000000d1000000330200003402000057010000b50200006d00000060020000330200006d010000b500000004030000a502000036010000f800000061010000c40200009a01000043020000660300006902000049030000780200005c030000210100001802000023000000090300006a0200004a020000a8010000410300004d000000550200005a0100000d010000f502000078020000b7020000ef0200004b010000f7000000b80000002d00000013030000a80200001200000042000000970100007101000036000000ec010000e4000000650200003e0300009a030000b501000007020000840200008903000015030000a401000031010000b9010000cf0000002c0100007c0300003b0300008d000000190200007d010000960200000102000038000000fc00000055010000f20000001d0300004603000045030000d0020000e000000033010000770200003d000000570000003002000036010000f4020000990200008d010000280300005303000035010000d90100001b0300007a0100001f0000008702000093030000cb010000260300004e020000db020000a9010000d800000024020000f90000004101000071030000bb02000017020000a10200000e030000d20000002f030000890300002f0100004b0300009a0300001901000049000000d50100001703000094020000a2000000f2010000340100009b000000a60100008b03000031030000bb0000003e00000010000000a901000017020000500100001e010000b501000077010000110100006202000028010000b70000009b030000740000009b020000ef020000610100003e0000006e010000b30200007b010000af0200004a0300002500000065010000d0020000e60200004a01000005000000270000009b03000037010000a8010000f2000000ed02000041010000360000009d0200003c010000560100002b01000016020000690000009b020000e801000080020000a0020000400200001c0200003c010000e6010000d1020000620200002e00000090020000bf010000ab00000068020000d0010000be000000130200002901000041010000fa020000f002000015020000af000000860000000e0000007d010000b1010000cd0200002d0000006f00000014000000540200001c010000e00200008a000000860200009b0100006d0300009d0200008d000000970300002d0000000c03000097010000a40000004c01000083030000a5000000d60200005802000045010000f20100008f02000065010000f002000000030000df00000051030000870200003f000000360100005f030000fb0000006e010000300100001a010000e2020000a30200009a01000085010000f40000001f000000790000002f01000007010000")};

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String generateErrorCorrection(CharSequence charSequence, int i) {
        int errorCorrectionCodewordCount = getErrorCorrectionCodewordCount(i);
        char[] cArr = new char[errorCorrectionCodewordCount];
        int length = charSequence.length();
        for (int i2 = 0; i2 < length; i2++) {
            int i3 = errorCorrectionCodewordCount - 1;
            int charAt = (charSequence.charAt(i2) + cArr[i3]) % 929;
            while (i3 > 0) {
                cArr[i3] = (char) ((cArr[i3 - 1] + (929 - ((EC_COEFFICIENTS[i][i3] * charAt) % 929))) % 929);
                i3--;
            }
            cArr[0] = (char) ((929 - ((charAt * EC_COEFFICIENTS[i][0]) % 929)) % 929);
        }
        StringBuilder sb = new StringBuilder(errorCorrectionCodewordCount);
        for (int i4 = errorCorrectionCodewordCount - 1; i4 >= 0; i4--) {
            char c = cArr[i4];
            if (c != 0) {
                cArr[i4] = (char) (929 - c);
            }
            sb.append(cArr[i4]);
        }
        return sb.toString();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static int getErrorCorrectionCodewordCount(int i) {
        if (i < 0 || i > 8) {
            throw new IllegalArgumentException("Error correction level must be between 0 and 8!");
        }
        return 1 << (i + 1);
    }

    private static long[] $d2j$hex$e86ed132$decode_J(String src) {
        byte[] d = $d2j$hex$e86ed132$decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        LongBuffer s = b.asLongBuffer();
        long[] data = new long[d.length / 8];
        s.get(data);
        return data;
    }

    private static int[] $d2j$hex$e86ed132$decode_I(String src) {
        byte[] d = $d2j$hex$e86ed132$decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        IntBuffer s = b.asIntBuffer();
        int[] data = new int[d.length / 4];
        s.get(data);
        return data;
    }

    private static short[] $d2j$hex$e86ed132$decode_S(String src) {
        byte[] d = $d2j$hex$e86ed132$decode_B(src);
        ByteBuffer b = ByteBuffer.wrap(d);
        b.order(ByteOrder.LITTLE_ENDIAN);
        ShortBuffer s = b.asShortBuffer();
        short[] data = new short[d.length / 2];
        s.get(data);
        return data;
    }

    private static byte[] $d2j$hex$e86ed132$decode_B(String src) {
        int hh;
        int i;
        char[] d = src.toCharArray();
        byte[] ret = new byte[src.length() / 2];
        for (int i2 = 0; i2 < ret.length; i2++) {
            char h = d[2 * i2];
            char l = d[(2 * i2) + 1];
            if (h >= '0' && h <= '9') {
                hh = h - '0';
            } else if (h >= 'a' && h <= 'f') {
                hh = (h - 'a') + 10;
            } else if (h >= 'A' && h <= 'F') {
                hh = (h - 'A') + 10;
            } else {
                throw new RuntimeException();
            }
            if (l >= '0' && l <= '9') {
                i = l - '0';
            } else if (l >= 'a' && l <= 'f') {
                i = (l - 'a') + 10;
            } else if (l >= 'A' && l <= 'F') {
                i = (l - 'A') + 10;
            } else {
                throw new RuntimeException();
            }
            int ll = i;
            ret[i2] = (byte) ((hh << 4) | ll);
        }
        return ret;
    }
}
